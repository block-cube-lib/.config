
###
# Denite
###

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [Denite] <Nop>
  nmap <Space>d [Denite]
  nnoremap <silent> [Denite]b :<C-u>Denite buffer<CR>
  nnoremap <silent> [Denite]d :<C-u>Denite directory_rec<CR>
  nnoremap <silent> [Denite]f :<C-u>Denite file_rec<CR>
  nnoremap <silent> [Denite]h :<C-u>Denite help<CR>
  nnoremap <silent> [Denite]l :<C-u>Denite line<CR>
  nnoremap <silent> [Denite]c :<C-u>Denite colorscheme<CR>

  call denite#custom#map('_', "\<C-n>", 'move_to_next_line')
  call denite#custom#map('_', "\<C-p>", 'move_to_prev_line')
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
hook_add = '''
  nnoremap <silent> [Denite]m :<C-u>Denite file_mru<CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
hook_add = '''
  nnoremap <silent> [Denite]y :<C-u>Denite neoyank<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  if has('conceal')
    set conceallevel=0
    set concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'deoplete.nvim'

[[plugins]]
depends = ['deoplete.nvim']
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

# deoplete source
# c++
[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
if = '''filereadable($LIBCLANG_PATH) && isdirectory($CLANG_HEADER_PATH)'''
depends = ['deoplete.nvim']
hook_source = '''
  let g:deoplete#sources#clang#libclang_path = $LIBCLANG_PATH
  let g:deoplete#sources#clang#clang_header = $CLANG_HEADER_PATH
'''

# swift
[[plugins]]
repo = 'landaire/deoplete-swift'
on_ft = ['swift']
if = '''has('mac') && executable('sourcekitten')'''
depends = ['deoplete.nvim']
hook_source = '''
  let g:deoplete#sources#swift#daemon_autostart = 1
'''

# c# completion
[[plugins]]
repo = 'OmniSharp/omnisharp-vim'
on_ft = ['cs']
if = '''(dein#util#_is_windows()) && executable("MSBuild") || executable("xbuild")'''
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'MSBuild.exe server/OmniSharp.sln /p:Platform="Any CPU"'
  else
    let cmd = 'xbuild server/OmniSharp.sln'
  endif
  let g:dein#plugin.build = cmd
'''

# c#
[[plugins]]
repo = 'Robzz/deoplete-omnisharp'
on_ft = ['cs']
on_source = ['omnisharp-vim']
depends = ['deoplete.nvim']

# vim
repo = 'Shougo/neco-vim'
on_ft = ['vim']
depends = ['deoplete.nvim']

# python
#[[plugins]]
#repo = 'zchee/deoplete-jedi'
#on_ft = ['python']
#depends = ['deoplete.nvim']

# rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
  let g:rustfmt_autosave = 0
'''

# language server
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
on_ft = ['rust', 'python']
hook_post_update = '''
  let g:dein#plugin.build = './install.sh'
'''
hook_source = '''
  let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'stable', 'rls'],
        \ 'python': ['pyls']
        \}
  let g:LanguageClient_autoStart = 1
  nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
  nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>
'''

###
# filer
###
[[plugins]]
repo = "Shougo/defx.nvim"
hook_add = '''
  nnoremap [defx] <Nop>
  nmap <Space>F [defx]
  nnoremap <silent> [defx] :<C-u>Defx<CR>
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
          \ defx#do_action('open')
    nnoremap <silent><buffer><expr> K
          \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
          \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> d
          \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
          \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> h
          \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
          \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> <Space>
          \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> j
          \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
          \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
          \ defx#do_action('redraw')
  endfunction
'''

###
# utility
###
[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap [NERDTree] <Nop>
  nmap <Space>n [NERDTree]
  nnoremap <silent> [NERDTree] :<C-u>NERDTreeToggle<CR>

  call denite#custom#map('_', "\<C-n>", 'move_to_next_line')
  call denite#custom#map('_', "\<C-p>", 'move_to_prev_line')
'''

###
# display
###
[[plugins]]
repo = 'KeitaNakamura/highlighter.nvim'
hook_add = '''
  let g:highlighter#auto_update = 1
  let g:heghlighter#project_root_signs = ['.git', '.clang-format']
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['markdown']

  let g:indent_guides_auto_colors = 1
  "augroup set_indent_guides
  "  autocmd!
  "  autocmd VimEnter,colorscheme * :hi IndentGuidesOdd  guifg=gray guibg=#393939 ctermfg=8 ctermbg=7
  "  autocmd VimEnter,colorscheme * :hi IndentGuidesEven guifg=gray guibg=#303030 ctermfg=7 ctermbg=8
  "augroup END
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp']

###
# browser
###
repo = 'tyru/open-browser.vim'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart_search)
  vmap gx <Plug>(openbrowser-smart_search)
'''

[[plugins]]
repo = 'kannokanno/previm'

# text browser
[[plugins]]
repo = 'yuratomo/w3m.vim'
if = '''executable("w3m")'''

###
# syntax highlight
###
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'keith/swift.vim'
on_ft = ['swift']

[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
hook_source = '''
if executable("rustfmt")
  nnoremap [RustFmt] <Nop>
  nmap <Space>f [RustFmt]
  nnoremap <silent> [RustFmt] :<C-u>RustFmt<CR>
endif
'''

###
# syntax check
###
[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_mode_map = {
        \ 'mode': 'passive',
        \ 'active_filetypes': ['swift']
        \}
'''

[[plugins]]
repo = 'kballard/vim-swift'
on_ft = ['swift']

###
# editor
###
[[plugins]]
repo = 'editorconfig/editorconfig-vim'

###
# status line
###
[[plugins]] # status line
repo = 'itchyny/lightline.vim'
depends = ['itchyny/vim-gitbranch']
hook_add = '''
  function! LightLineFileName()
    return expand('%') !=# '' ? expand('%') : '[No Name]'
  endfunction

  let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ ['mode', 'paste'],
        \             ['gitbranch', 'readonly', 'filename', 'modified'] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'gitbranch#name',
        \   'filename': 'LightLineFileName'
        \ },
        \}
'''

###
# color scheme
###

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'vim-scripts/dante.vim'

[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'nightsense/seabird'

[[plugins]]
repo = 'kamwitsta/nordisk'

[[plugins]]
repo = 'w0ng/vim-hybrid'

#on_event = ['VimEnter']
hook_add = '''
  augroup set_colorscheme
    autocmd!
    autocmd VimEnter * nested syntax on
    autocmd VimEnter * nested colorscheme iceberg
  augroup END
'''
